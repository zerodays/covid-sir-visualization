{"version":3,"sources":["VisualizationField.js","HelpCard.js","ControlPanel.js","ChartView.js","App.js","index.js"],"names":["field","VisualizationField","canvasRef","React","createRef","countInfectedNeighbours","x","y","props","widthPoints","heightPoints","count","i","j","paintRect","newField","canvasContext","rectSize","fillStyle","getColorFromState","fillRect","getNewStateForPoint","Math","random","gamma","infectedNeighbours","betta","state","infectedColor","susceptibleColor","removedColor","emptyField","Array","fill","evolve","s","r","newState","sum","tick","context","getCanvasContext","startTime","Date","getTime","fieldTmp","console","log","addSeed","reset","clearRect","current","getContext","this","classes","className","root","style","width","height","ref","canvas","backgroundColor","transform","zoom","Component","withStyles","theme","position","overflow","HelpCard","Card","Box","p","expandable","Grid","container","direction","spacing","item","xs","Typography","variant","href","key","legend","maxWidth","grey","borderRadius","borderWidth","borderColor","borderStyle","paddingX","paddingY","maxHeight","transition","display","marginRight","ControlPanel","justify","day","pt","Slider","value","min","max","step","onChange","e","v","onChangeBetta","valueLabelDisplay","onChangeGamma","Button","size","onClick","onReset","color","float","options","colors","red","blue","title","text","animations","enabled","chart","type","dataLabels","stroke","curve","xaxis","tickAmount","labels","formatter","yaxis","round","tooltip","markers","ChartView","pr","series","name","data","dataS","dataI","dataR","SUSCEPTIBLE_COLOR","INFECTED_COLOR","REMOVED_COLOR","App","fieldRef","seedCalled","iterateWithSeed","keyCode","w","document","body","clientWidth","h","clientHeight","xPosition","ceil","yPosition","setState","prevState","onScroll","newZoom","deltaY","addEventListener","wPoints","hPoints","removeEventListener","onKeyDown","onWheel","fieldContainer","helpCardContainer","controlPanelContainer","chartViewContainer","top","left","opacity","right","bottom","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9769923.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  withStyles,\n} from '@material-ui/core';\n\nconst styles = theme => ({\n  root: {\n    position: 'relative',\n    overflow: 'hidden',\n  },\n  canvas: {\n    position: 'absolute',\n  },\n});\n\n// global data fields for better performance\nlet field;\nconst SUSCEPTIBLE = 0;\nconst INFECTED = 1;\nconst REMOVED = 2;\n\nclass VisualizationField extends Component {\n  canvasRef = React.createRef();\n\n  componentDidMount() {\n    field = this.emptyField();\n  }\n\n  countInfectedNeighbours = (field, x, y) => {\n    const {widthPoints, heightPoints} = this.props;\n\n    let count = 0;\n\n    for (let i = y - 1; i < y + 2; i++) {\n      for (let j = x - 1; j < x + 2; j++) {\n\n        if (i === x && j === y) continue; // skip self\n        if (i < 0 || j < 0 || i >= heightPoints || j >= widthPoints) continue; // watch for array boundaries\n\n        if (field[i][j] === INFECTED) count++;\n      }\n    }\n\n    return count;\n  };\n\n  paintRect = (x, y, newField, canvasContext) => {\n    const {rectSize} = this.props;\n    canvasContext.fillStyle = this.getColorFromState(newField[y][x]);\n    canvasContext.fillRect(rectSize * x, rectSize * y, rectSize, rectSize);\n  };\n\n  getNewStateForPoint = (field, x, y) => {\n    if (field[y][x] === REMOVED) return REMOVED;\n\n    if (field[y][x] === INFECTED) {\n      if (Math.random() < this.props.gamma) return REMOVED;\n      else return INFECTED;\n    }\n\n    let infectedNeighbours = this.countInfectedNeighbours(field, x, y);\n\n    if (Math.random() < infectedNeighbours * this.props.betta / 8) return INFECTED;\n    return SUSCEPTIBLE;\n  };\n\n  getColorFromState = (state) => {\n    const {infectedColor, susceptibleColor, removedColor} = this.props;\n    if (state === INFECTED) return infectedColor;\n    if (state === REMOVED) return removedColor;\n    return susceptibleColor;\n  };\n\n  emptyField = () => {\n    const {widthPoints, heightPoints} = this.props;\n\n    let newField = Array(heightPoints);\n    for (let i = 0; i < heightPoints; i++) {\n      newField[i] = Array(widthPoints).fill(0);\n    }\n    return newField;\n  };\n\n  evolve = (field, canvasContext) => {\n    const {widthPoints, heightPoints} = this.props;\n    let newField = this.emptyField();\n\n    // count each section\n    let s = 0;\n    let i = 0;\n    let r = 0;\n\n    // do the evolution\n    for (let y = 0; y < heightPoints; y++) {\n      for (let x = 0; x < widthPoints; x++) {\n        const newState = this.getNewStateForPoint(field, x, y);\n        newField[y][x] = newState;\n\n        if (newState === SUSCEPTIBLE) s++;\n        else if (newState === INFECTED) i++;\n        else if (newState === REMOVED) r++;\n\n        if (newField[y][x] !== field[y][x]) this.paintRect(x, y, newField, canvasContext);\n      }\n    }\n\n    // normalize\n    const sum = s + i + r;\n    s /= sum;\n    i /= sum;\n    r /= sum;\n\n    return [newField, s, i, r];\n  };\n\n  tick = () => {\n    let context = this.getCanvasContext();\n\n    let startTime = new Date().getTime();\n    const [fieldTmp, s, i, r] = this.evolve(field, context);\n    field = fieldTmp;\n    console.log(`time for evolution: ${new Date().getTime() - startTime} ms`);\n    return [s, i, r];\n  };\n\n  addSeed = (x, y) => {\n    field[y][x] = INFECTED;\n    this.paintRect(x, y, field, this.getCanvasContext());\n  };\n\n  reset = () => {\n    const {widthPoints, heightPoints, rectSize} = this.props;\n    field = this.emptyField();\n    this.getCanvasContext().clearRect(0, 0, widthPoints * rectSize, heightPoints * rectSize);\n  };\n\n  getCanvasContext = () => {\n    return this.canvasRef.current.getContext('2d');\n  };\n\n\n  render() {\n    const {classes, widthPoints, heightPoints, rectSize, susceptibleColor} = this.props;\n\n    return <div className={classes.root} style={{\n      width: widthPoints * rectSize,\n      height: heightPoints * rectSize,\n    }}>\n      <canvas\n        ref={this.canvasRef}\n        className={classes.canvas}\n        style={{\n          backgroundColor: susceptibleColor,\n          transform: `scale(${this.props.zoom})`,\n          width: widthPoints * rectSize,\n          height: heightPoints * rectSize,\n        }}\n        width={widthPoints * rectSize}\n        height={heightPoints * rectSize}/>\n    </div>;\n  }\n}\n\nVisualizationField.propTypes = {\n  betta: PropTypes.number.isRequired,\n  gamma: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired,\n  widthPoints: PropTypes.number.isRequired,\n  heightPoints: PropTypes.number.isRequired,\n  rectSize: PropTypes.number.isRequired,\n  infectedColor: PropTypes.string.isRequired,\n  susceptibleColor: PropTypes.string.isRequired,\n  removedColor: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(VisualizationField);\n\n","import React, { Component } from 'react';\nimport { Box, Card, Grid, Typography, withStyles } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  root: {\n    maxWidth: 256,\n  },\n  key: {\n    backgroundColor: grey[300],\n    borderRadius: 2,\n    borderWidth: 2,\n    borderColor: grey[300],\n    borderStyle: 'solid',\n    paddingX: 8,\n    paddingY: 2,\n  },\n  expandable: {\n    maxHeight: 20,\n    transition: 'max-height 300ms ease-out',\n    '&:hover': {\n      maxHeight: 512,\n    },\n  },\n  legend: {\n    width: 12,\n    height: 12,\n    borderColor:  grey[700],\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 2,\n    display: 'inline-block',\n    marginRight: 6,\n  },\n});\n\nclass HelpCard extends Component {\n  render() {\n    const {classes} = this.props;\n\n    return <Card className={classes.root}>\n      <Box p={1} className={classes.expandable}>\n        <Grid container direction='row' spacing={1}>\n          <Grid item xs={12}>\n            <Typography variant='subtitle2'>\n              Pomoč\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='caption'>\n              Preprosta simulacija lokalnega (epidemiološkega) <a\n              href={'https://en.m.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SIR_model'}>SIR modela</a>.\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='subtitle2'>\n              Navigacija\n            </Typography>\n            <Typography variant='caption'>\n              <ul>\n                <li>Pritisnite tipko <span className={classes.key}>Enter</span> za simulacijo prehoda na naslednji dan. Prvi okuženi se bo pokazal na sredini zaslona na <b>1. dan</b>.\n                </li>\n                <li>Uporabite <span className={classes.key}>\"scroll\"</span> na mišlki za povečanje ali zmanjšanje vidnega polja.</li>\n                <li>Parametre simulacije lahko upravljate s <b>kontrolno ploščo na desni strani zaslona</b>.</li>\n                <li>Podatki na gafu <b>spodaj levo</b> se posodobijo vsakih 21 dni simulacije.\n                </li>\n              </ul>\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='subtitle2'>\n              Legenda\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='caption'>\n              <span className={classes.legend} style={{backgroundColor: this.props.susceptibleColor}}/>S (susceptible) dovzetni posamezniki.\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='caption'>\n              <span className={classes.legend} style={{backgroundColor: this.props.infectedColor}}/>I (infected) okuženi posamezniki.\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='caption'>\n              <span className={classes.legend} style={{backgroundColor: this.props.removedColor}}/>R (removed) odstranjeni oz. imuni posamezniki.\n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n    </Card>;\n  }\n}\n\nHelpCard.propTypes = {\n  infectedColor: PropTypes.string.isRequired,\n  susceptibleColor: PropTypes.string.isRequired,\n  removedColor: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(HelpCard);","import React, { Component } from 'react';\nimport { Box, Card, Grid, Slider, Button, Typography, withStyles } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n  root: {\n    width: 256,\n  },\n  day: {\n    float: 'right',\n  }\n});\n\nclass ControlPanel extends Component {\n  render() {\n    const {classes} = this.props;\n\n    return <Card className={classes.root}>\n      <Box p={1}>\n        <Grid container direction='row' justify='center' spacing={1}>\n          <Grid item xs={12}>\n            <Typography variant='subtitle2'>\n              Nadzorna plošča <span className={classes.day}>Dan {this.props.day}</span>\n            </Typography>\n          </Grid>\n          <Grid item xs={12}/>\n          <Grid item xs={12}>\n            <Typography variant='body2'>\n              β <small> - verjetnost, da se posameznik okuži po enodnevnem kontaku z okuženim</small>\n            </Typography>\n            <Box pt={4}>\n              <Slider\n                value={this.props.betta}\n                min={0}\n                max={1}\n                step={0.01}\n                onChange={(e, v) => this.props.onChangeBetta(v)}\n                valueLabelDisplay=\"on\"\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12}/>\n          <Grid item xs={12}>\n            <Typography variant='body2'>\n              γ <small> - verjetnost, da posameznik na nek dan ozdravi</small>\n            </Typography>\n            <Box pt={4}>\n              <Slider\n                value={this.props.gamma}\n                min={0}\n                max={1}\n                step={0.01}\n                onChange={(e, v) => this.props.onChangeGamma(v)}\n                valueLabelDisplay=\"on\"\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12}/>\n          <Grid item>\n            <Button size='small' variant='raised' onClick={this.props.onReset} color='secondary'>\n              Ponastavi simulacijo\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Card>;\n  }\n}\n\nControlPanel.propTypes = {\n  day: PropTypes.number.isRequired,\n  betta: PropTypes.number.isRequired,\n  gamma: PropTypes.number.isRequired,\n  onChangeBetta: PropTypes.func.isRequired,\n  onChangeGamma: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(ControlPanel);","import React, { Component } from 'react';\nimport { Box, Card, colors, withStyles } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport PropTypes from 'prop-types';\n\nconst styles = ({});\n\nconst SUSCEPTIBLE_COLOR = colors.grey[500];\nconst INFECTED_COLOR = colors.red[400];\nconst REMOVED_COLOR = colors.blue[400];\n\nconst options = {\n  colors: [SUSCEPTIBLE_COLOR, INFECTED_COLOR, REMOVED_COLOR],\n  title: {\n    text: 'SIR vrednosti (osvežene vsakih 21 dni)',\n  },\n  animations: {\n    enabled: false,\n  },\n  chart: {\n    type: 'area',\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  stroke: {\n    curve: 'smooth',\n  },\n  xaxis: {\n    type: 'number',\n    tickAmount: 8,\n    labels: {\n      formatter: value => `Dan ${value * 21}`,\n    },\n  },\n  yaxis: {\n    labels: {\n      formatter: value => `${Math.round(100 * value)} %`,\n    },\n  },\n  tooltip: {\n    title: 'Dan',\n  },\n  markers: {\n    size: 0,\n  },\n};\n\nclass ChartView extends Component {\n  render() {\n    return <Card>\n      <Box pr={2} pt={2}>\n        <Chart\n          width={512}\n          options={options}\n          series={[{\n            name: 'S - dovzetni',\n            data: this.props.dataS,\n          }, {\n            name: 'I - okuženi',\n            data: this.props.dataI,\n          }, {\n            name: 'R - imuni',\n            data: this.props.dataR,\n          }]}/>\n      </Box>\n    </Card>;\n  }\n}\n\nChartView.propTypes = {\n  dataS: PropTypes.array.isRequired,\n  dataI: PropTypes.array.isRequired,\n  dataR: PropTypes.array.isRequired,\n};\n\nexport default withStyles(styles)(ChartView);","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core';\nimport { colors } from '@material-ui/core';\nimport VisualizationField from './VisualizationField';\nimport HelpCard from './HelpCard';\nimport ControlPanel from './ControlPanel';\nimport ChartView from './ChartView';\nimport { grey } from '@material-ui/core/colors';\n\nconst RECT_SIZE = 3;\nconst SUSCEPTIBLE_COLOR = colors.grey[200];\nconst INFECTED_COLOR = colors.red[400];\nconst REMOVED_COLOR = colors.blue[400];\n\nconst styles = theme => ({\n  root: {\n    overflow: 'hidden',\n    height: '100vh',\n    width: '100vw',\n    position: 'relative',\n  },\n  fieldContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  },\n  helpCardContainer: {\n    position: 'absolute',\n    top: 16,\n    left: 16,\n    opacity: 0.6,\n    transition: 'opacity 200ms ease-in-out',\n    '&:hover': {\n      opacity: 1,\n    },\n  },\n  controlPanelContainer: {\n    position: 'absolute',\n    right: 16,\n    top: 16,\n    opacity: 0.6,\n    transition: 'opacity 200ms ease-in-out',\n    '&:hover': {\n      opacity: 1,\n    },\n  },\n  chartViewContainer: {\n    position: 'absolute',\n    left: 16,\n    bottom: 16,\n    opacity: 0.6,\n    transition: 'opacity 200ms ease-in-out',\n    '&:hover': {\n      opacity: 1,\n    },\n  },\n});\n\nclass App extends Component {\n  fieldRef = React.createRef();\n  state = {\n    seedCalled: false,\n    day: 0,\n    zoom: 1.0,\n    widthPoints: null,\n    heightPoints: null,\n    betta: 0.8,\n    gamma: 0.2,\n    dataS: [],\n    dataI: [],\n    dataR: [],\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.iterateWithSeed);\n\n    const w = document.body.clientWidth;\n    const h = document.body.clientHeight;\n\n    const wPoints = Math.ceil(w / RECT_SIZE);\n    const hPoints = Math.ceil(h / RECT_SIZE);\n\n    this.setState({\n      widthPoints: wPoints,\n      heightPoints: hPoints,\n    });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.iterateWithSeed);\n  }\n\n  iterateWithSeed = (e) => {\n    if (e.keyCode !== 13) return;\n\n    const field = this.fieldRef.current;\n\n    if (!this.state.seedCalled) {\n      const w = document.body.clientWidth;\n      const h = document.body.clientHeight;\n\n      const xPosition = Math.ceil(w / RECT_SIZE / 2);\n      const yPosition = Math.ceil(h / RECT_SIZE / 2);\n\n      field.addSeed(xPosition, yPosition);\n      this.setState({seedCalled: true});\n    }\n\n    const [s, i, r] = field.tick();\n\n    // refresh data every 21 days\n    if (this.state.day % 21 === 0) {\n      this.setState(prevState => ({\n        day: prevState.day + 1,\n        dataS: [...prevState.dataS, s],\n        dataI: [...prevState.dataI, i],\n        dataR: [...prevState.dataR, r],\n      }));\n    } else {\n      this.setState(prevState => ({\n        day: prevState.day + 1,\n      }));\n    }\n  };\n\n  onScroll = (e) => {\n    let newZoom = this.state.zoom - e.deltaY / 100;\n    newZoom = Math.min(3, Math.max(1, newZoom));\n    this.setState({zoom: newZoom});\n  };\n\n  onChangeBetta = value => this.setState({betta: value});\n  onChangeGamma = value => this.setState({gamma: value});\n  onReset = () => {\n    this.setState({\n      seedCalled: false,\n      day: 0,\n      dataS: [],\n      dataI: [],\n      dataR: [],\n    }, this.fieldRef.current.reset);\n  };\n\n  render() {\n    const {classes} = this.props;\n\n    return <div className={classes.root} onKeyDown={this.iterateWithSeed} onWheel={this.onScroll}>\n      <div className={classes.fieldContainer}>\n        {\n          this.state.widthPoints == null ? null :\n            <VisualizationField\n              ref={this.fieldRef}\n              widthPoints={this.state.widthPoints}\n              heightPoints={this.state.heightPoints}\n              rectSize={RECT_SIZE}\n              susceptibleColor={SUSCEPTIBLE_COLOR}\n              infectedColor={INFECTED_COLOR}\n              removedColor={REMOVED_COLOR}\n              betta={this.state.betta}\n              gamma={this.state.gamma}\n              zoom={this.state.zoom}\n            />\n        }\n      </div>\n\n      <div className={classes.helpCardContainer}>\n        <HelpCard\n          susceptibleColor={SUSCEPTIBLE_COLOR}\n          infectedColor={INFECTED_COLOR}\n          removedColor={REMOVED_COLOR}\n        />\n      </div>\n\n      <div className={classes.controlPanelContainer}>\n        <ControlPanel betta={this.state.betta}\n                      gamma={this.state.gamma}\n                      day={this.state.day}\n                      onChangeBetta={this.onChangeBetta}\n                      onChangeGamma={this.onChangeGamma}\n                      onReset={this.onReset}\n        />\n      </div>\n\n      <div className={classes.chartViewContainer}>\n        <ChartView dataS={this.state.dataS}\n                   dataI={this.state.dataI}\n                   dataR={this.state.dataR}\n        />\n      </div>\n    </div>;\n  }\n}\n\nexport default withStyles(styles)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}